CMAKE_MINIMUM_REQUIRED(VERSION 3.19)

#在PROJECT之前修改默认编译器，避免cmake陷入死循环
IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
    SET(CMAKE_C_COMPILER "/usr/bin/gcc")
    SET(CMAKE_CXX_COMPILER "/usr/bin/g++")
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
    SET(CMAKE_C_COMPILER "your c compiler path")
    SET(CMAKE_CXX_COMPILER "your c++ compiler path")
ENDIF()
SET(CMAKE_CXX_STANDARD 14)

PROJECT(FramelessWidget)

IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
    SET(CMAKE_PREFIX_PATH "/usr/bin/cmake")
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
    SET(CMAKE_PREFIX_PATH "your cmake path")
ENDIF()
IF(NOT CMAKE_PREFIX_PATH)
    MESSAGE(FATAL_ERROR "CMAKE_PREFIX_PATH is not defined, you may need to set it "
            "(-DCMAKE_PREFIX_PATH=\"path/to/Qt/lib/cmake\" or -DCMAKE_PREFIX_PATH=/usr/include/{host}/qt{version}/ on Ubuntu)")
ENDIF()

#设置build type
SET(CMAKE_BUILD_TYPE DEBUG)
#SET(CMAKE_BUILD_TYPE RELEASE)

#动态库输出目录
IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/build/debug/shared)
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/build/release/shared)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/build/debug/shared)
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/build/release/shared)
ENDIF()
#静态库输出目录（如果需要输出为静态库的话）
#SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_SOURCE_DIR}/build/debug/static)
#SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_SOURCE_DIR}/build/release/static)

SET(CMAKE_AUTOMOC ON)
SET(CMAKE_AUTORCC ON)
#不需要UI
#SET(CMAKE_AUTOUIC ON)

SET(QT_VERSION 5)
SET(REQUIRED_LIBS Core Gui Widgets)
SET(REQUIRED_LIBS_QUALIFIED Qt${QT_VERSION}::Core Qt${QT_VERSION}::Gui Qt${QT_VERSION}::Widgets)


#资源文件
SET(QRC resource/img.qrc resource/qss.qrc)
#源文件
ADD_SUBDIRECTORY(platform)
AUX_SOURCE_DIRECTORY(. SRC)

ADD_LIBRARY(${PROJECT_NAME} SHARED ${SRC} ${QRC})
#ADD_LIBRARY(${PROJECT_NAME} STATIC ${SRC} ${QRC})

FIND_PACKAGE(Qt${QT_VERSION} COMPONENTS ${REQUIRED_LIBS} REQUIRED)

#不同平台需要依赖不同底层工具
IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${REQUIRED_LIBS_QUALIFIED} XUtil)
ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${REQUIRED_LIBS_QUALIFIED} WINUtil)
ENDIF()
